import {
    DataProvider,
    fetchUtils,
} from "react-admin";
import { Task, getTasksByStatus } from "./components/tasks";

const apiUrl = "/api";

// Создаем безопасный httpClient
const httpClient = async (url: string, options: fetchUtils.Options = {}) => {
    // 1. Создаем заголовки как обычный объект
    const headers: Record<string, string> = {
        'Accept': 'application/json'
    };

    // 2. Добавляем токен авторизации, если он доступен
    const token = localStorage.getItem("token");
    if (token) {
        headers['Authorization'] = `Bearer ${token}`;
    }

    // 3. Устанавливаем Content-Type для запросов с телом
    if (options.body && ['POST', 'PUT', 'PATCH'].includes(options.method || '')) {
        headers['Content-Type'] = 'application/json';
    }

    // 4. Логируем для отладки
    console.log('Заголовки запроса:', headers);

    try {
        const response = await fetchUtils.fetchJson(url, {
            ...options,
            headers: headers
        });
        return response;
    } catch (error) {
        console.error('Ошибка запроса:', error);
        throw error;
    }
};

// Базовый провайдер данных
const baseDataProvider: DataProvider = {
    getList: async (resource, params) => {
        const { page, perPage } = params.pagination;
        const { field, order } = params.sort;

        const query = {
            sort: JSON.stringify([field, order]),
            range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),
            filter: JSON.stringify(params.filter),
        };

        const url = `${apiUrl}/${resource}?${new URLSearchParams(query).toString()}`;
        const { json, headers } = await httpClient(url);

        return {
            data: json,
            total: parseInt(headers.get('content-range')?.split('/')[1] || json.length, 10),
        };
    },

    getOne: async (resource, params) => {
        const { json } = await httpClient(`${apiUrl}/${resource}/${params.id}`);
        return { data: json };
    },

    getMany: async (resource, params) => {
        const query = {
            filter: JSON.stringify({ id: params.ids }),
        };
        const url = `${apiUrl}/${resource}?${new URLSearchParams(query).toString()}`;
        const { json } = await httpClient(url);
        return { data: json };
    },

    getManyReference: async (resource, params) => {
        const { page, perPage } = params.pagination;
        const { field, order } = params.sort;

        const query = {
            sort: JSON.stringify([field, order]),
            range: JSON.stringify([(page - 1) * perPage, page * perPage - 1]),
            filter: JSON.stringify({
                ...params.filter,
                [params.target]: params.id,
            }),
        };

        const url = `${apiUrl}/${resource}?${new URLSearchParams(query).toString()}`;
        const { json, headers } = await httpClient(url);

        return {
            data: json,
            total: parseInt(headers.get('content-range')?.split('/')[1] || json.length, 10),
        };
    },

    update: async (resource, params) => {
        const { json } = await httpClient(`${apiUrl}/${resource}/${params.id}`, {
            method: 'PUT',
            body: JSON.stringify(params.data),
        });
        return { data: json };
    },

    updateMany: async (resource, params) => {
        const query = {
            filter: JSON.stringify({ id: params.ids }),
        };
        const { json } = await httpClient(`${apiUrl}/${resource}?${new URLSearchParams(query).toString()}`, {
            method: 'PUT',
            body: JSON.stringify(params.data),
        });
        return { data: json };
    },

    create: async (resource, params) => {
        const { json } = await httpClient(`${apiUrl}/${resource}`, {
            method: 'POST',
            body: JSON.stringify(params.data),
        });
        return { data: { ...params.data, id: json.id } };
    },

    delete: async (resource, params) => {
        const { json } = await httpClient(`${apiUrl}/${resource}/${params.id}`, {
            method: 'DELETE',
        });
        return { data: json };
    },

    deleteMany: async (resource, params) => {
        const query = {
            filter: JSON.stringify({ id: params.ids }),
        };
        const { json } = await httpClient(`${apiUrl}/${resource}?${new URLSearchParams(query).toString()}`, {
            method: 'DELETE',
        });
        return { data: json };
    },
};

// Расширенный провайдер с кастомными методами
export const dataProvider = {
    ...baseDataProvider,

    updateTaskStatus: async (source: Task, destination: { status: Task["status"]; index: number }) => {
        const { data: unorderedTasks } = await baseDataProvider.getList("tasks", {
            pagination: { page: 1, perPage: 100 },
            sort: { field: "index", order: "ASC" },
            filter: {},
        });

        const tasksByStatus = getTasksByStatus(unorderedTasks);
        const updates = [];

        if (source.status === destination.status) {
            // Логика перемещения внутри одной колонки
            const columnTasks = tasksByStatus[source.status];

            const tasksToUpdate = source.index > destination.index
                ? columnTasks.filter(task => task.index >= destination.index && task.index < source.index)
                : columnTasks.filter(task => task.index <= destination.index && task.index > source.index);

            tasksToUpdate.forEach(task => {
                updates.push(
                    baseDataProvider.update("tasks", {
                        id: task.id,
                        data: {
                            index: source.index > destination.index
                                ? task.index + 1
                                : task.index - 1
                        },
                        previousData: task,
                    })
                );
            });
        } else {
            // Логика перемещения между колонками
            tasksByStatus[source.status]
                .filter(task => task.index > source.index)
                .forEach(task => {
                    updates.push(
                        baseDataProvider.update("tasks", {
                            id: task.id,
                            data: { index: task.index - 1 },
                            previousData: task,
                        })
                    );
                });

            tasksByStatus[destination.status]
                .filter(task => task.index >= destination.index)
                .forEach(task => {
                    updates.push(
                        baseDataProvider.update("tasks", {
                            id: task.id,
                            data: { index: task.index + 1 },
                            previousData: task,
                        })
                    );
                });
        }

        // Обновляем перемещаемую задачу
        updates.push(
            baseDataProvider.update("tasks", {
                id: source.id,
                data: {
                    index: destination.index,
                    status: destination.status,
                },
                previousData: source,
            })
        );

        await Promise.all(updates);
    }
};